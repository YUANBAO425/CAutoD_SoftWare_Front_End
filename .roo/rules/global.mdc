---
alwaysApply: true
---
# 项目通用规范

## 技术栈
- 使用 **React 18+ 框架**，采用原生 JavaScript 语言，不使用 TypeScript
- 使用 **Tailwind CSS** 构建响应式样式
- 使用 **shadcn/ui** 作为基础 UI 组件库（基于 Radix UI）
- 使用 **Zustand** 管理用户登录态、对话内容、多模型状态等
- 所有调用后端服务都必须使用 API 封装，接口统一放置在 `src/api` 目录中
- 组件嵌套层级不得超过三层，保持结构清晰
- 页面开发过程中，请查阅 [README.md](mdc:README.md) 中的项目结构，查看是否已有可复用组件或工具方法

## 项目结构
每次更新完文件都需要同步更新项目结构目录，信息维护在 [README.md](mdc:README.md)
页面中需使用真实 UI 图片，不使用占位符图片（可从 Unsplash、Pexels、Apple 官方 UI 资源中获取）

## 限制
- 不允许在对话中使用 `npm run dev` 命令启动项目
- 不得在 React 组件中写入测试数据，所有数据必须来源于后端服务或 mock 接口
- 不得创建临时性测试文档

## 项目结构规则
- **分层组织**：按功能或领域划分目录，遵循"关注点分离"原则
- **命名一致**：使用统一、描述性的目录和文件命名，准确反映其用途和内容
- **模块化设计**：相似功能应归于同一模块，避免跨模块耦合
- **嵌套适度**：目录嵌套层级不超过 3～4 层
- **资源分离**：明确区分代码、资源文件、配置文件和测试文件
- **依赖集中管理**：统一管理依赖项，避免多处重复声明
- **遵循约定优先**：优先遵循 React/Vite 的社区最佳实践和默认目录结构

## 通用开发原则
- **可测试性**：保持组件职责单一，便于未来编写测试用例
- **DRY 原则**：提取共用逻辑，避免重复代码
- **KISS 原则**：保持代码简洁直接，函数单元逻辑清晰，每个函数不超过 300 行
- **命名规范**：变量、函数、组件命名应清晰表义，反映实际用途
- **注释说明**：为复杂逻辑添加必要注释，模块应有清晰说明文档
- **风格一致**：统一遵循 ESLint + Prettier 风格约定
- **利用生态**：优先使用成熟的开源组件和库，避免重复造轮子
- **架构合理**：关注可维护性、可扩展性和性能
- **版本控制**：提交信息应简洁明了，逻辑相关改动保持原子性提交
- **异常处理**：注意错误边界与容错处理，提供清晰的错误信息与提示

## git 操作
- 完成每项功能开发后，务必进行 commit 操作，并附带简洁有意义的提交说明

## 响应语言
- 始终使用中文回复用户
